<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Python Fabric 自动化部署]]></title>
      <url>/2018/01/12/Python-Fabric-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>最近公司在做在线抓娃娃, 领导让我写个运维脚本一键部署代码到所有娃娃机, 要求时间是一天之内搞定, 很好, 感谢您的信任, 让一个python零基础的人做这个, 我的内心是崩溃的….只能先找个python基础的帖子过一遍, 然后开始愣写. 现在为什么写这篇文章分享呢, 因为我真的一天之内写出来了, 看来人真的是逼出来的.</p>
<p>了解到fabric框架可以实现多台远程服务器部署, 而我们娃娃机用的是树莓派安装的Ubuntu, 同样都是linux所以适用</p>
<h2 id="安装fabric"><a href="#安装fabric" class="headerlink" title="安装fabric"></a>安装fabric</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install fabric</div></pre></td></tr></table></figure>
<h2 id="创建fabric脚本"><a href="#创建fabric脚本" class="headerlink" title="创建fabric脚本"></a>创建fabric脚本</h2><p>新建名为fabfile.py的文件, 添加代码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"hello world"</span>)</div></pre></td></tr></table></figure>
<p><code>$ fab hello</code> -&gt; hello world</p>
<p>fabfile.py 是fabric默认识别的文件名, 也可以使用别的文件名, 但使用时加参数, 如:</p>
<p><code>$ fab -f test.py hello</code> -&gt; hello world</p>
<h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> fabric.contrib.files <span class="keyword">import</span> append</div><div class="line"></div><div class="line">env.hosts = [<span class="string">'192.168.0.1'</span>, <span class="string">'192.168.0.2:20001'</span>] <span class="comment"># 地址列表</span></div><div class="line">env.password = <span class="string">'I am the password of the remote server'</span></div><div class="line">env.user = <span class="string">'root'</span></div><div class="line">env.colorize_errors = <span class="keyword">True</span> <span class="comment"># 出错时以红色显示日志</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">fabric 中lcd表示在本地服务器执行cd, local表示在本地执行命令</div><div class="line">@runs_once 表示不管有多少个host, @runs_once修饰的方法只执行一次</div><div class="line">此方法就是拉代码, 但要配置ssh key, 否则手动输密码怎么能叫一键部署呢</div><div class="line">'''</div><div class="line"><span class="meta">@runs_once</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">with</span> lcd(<span class="string">'/home/yunai/wawaji/device/'</span>):</div><div class="line">         local(<span class="string">'git pull'</span>)</div><div class="line">         </div><div class="line"><span class="string">'''</span></div><div class="line">@parallel 修饰的方法就是在每台机器上都执行的方法</div><div class="line">pool_size 表示最大并发数量</div><div class="line">'''</div><div class="line"><span class="meta">@parallel(pool_size=10)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 输出等级设置，隐藏指定的类型</span></div><div class="line">    <span class="keyword">with</span> settings(</div><div class="line">        hide(<span class="string">'warnings'</span>, <span class="string">'running'</span>, <span class="string">'stdout'</span>, <span class="string">'stderr'</span>),</div><div class="line">        warn_only=<span class="keyword">True</span></div><div class="line">    ):</div><div class="line">        <span class="comment"># 实际业务, 我们是以某个文件的某行内容来作为是否更新过的标准, 这个就根据实际需求来制定就好</span></div><div class="line">        <span class="keyword">if</span> sudo(<span class="string">'grep internal /home/yunai/wawaji/control/control.py'</span>):</div><div class="line">            <span class="comment"># env.host_string 表示当前正在更新的机器的host</span></div><div class="line">            <span class="keyword">print</span> env.host_string + <span class="string">' had been updated before, canceled.'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> env.host_string + <span class="string">' updating file...'</span></div><div class="line">            <span class="comment"># 以sudo更新一个文件</span></div><div class="line">            put(local_path=<span class="string">'/home/yunai/wawaji/device/control/control.py'</span>, remote_path=<span class="string">'/home/yunai/wawaji/control/'</span>, use_sudo=<span class="keyword">True</span>, mode=<span class="number">755</span>)</div><div class="line">            <span class="comment"># 以sudo给文件追加内容, 相当于:</span></div><div class="line">            <span class="comment"># sudo('echo "NTP=192.168.0.3 192.168.0.2" &gt;&gt; /etc/systemd/timesyncd.conf')</span></div><div class="line">            <span class="comment"># 但fabric的append会自动识别文件末是否已有该内容, 如果有, 则不再追加</span></div><div class="line">            append(<span class="string">'/etc/systemd/timesyncd.conf'</span>, <span class="string">'NTP=192.168.0.3 192.168.0.2'</span>, use_sudo=<span class="keyword">True</span>)</div><div class="line">            <span class="keyword">print</span> env.host_string + <span class="string">' update completed'</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">在外部设置ip的方法</div><div class="line">也可以不使用该方法, 在内部直接写好所有ip</div><div class="line">'''      </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_ips</span><span class="params">(*ips)</span>:</span></div><div class="line">    [env.hosts.append(p) <span class="keyword">for</span> p <span class="keyword">in</span> ips <span class="keyword">if</span> p <span class="keyword">not</span> <span class="keyword">in</span> env.hosts]</div></pre></td></tr></table></figure>
<p>所以我们可以这样来调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fab set_ips:&apos;192.168.0.3&apos;,&apos;192.168.0.22&apos; prepare update</div></pre></td></tr></table></figure>
<h2 id="从数据库获取ip"><a href="#从数据库获取ip" class="headerlink" title="从数据库获取ip"></a>从数据库获取ip</h2><p>初期领导给我的ip列表都是截图, 我的内心那是相当崩溃的, 难道手打出来吗, 当然不是, 机智的我找了个图片识别网站先转成文本, 再用正则匹配出所有ip.  后期步入正轨用数据库就好了, 下面来说python怎么使用<strong>pymysql</strong>模块来操作数据库</p>
<p>安装pymysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install pymysql</div></pre></td></tr></table></figure>
<p>操作数据库</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_ip</span><span class="params">()</span>:</span></div><div class="line">    connection = pymysql.connect(</div><div class="line">        host = <span class="string">"127.0.0.1"</span>,</div><div class="line">        user = <span class="string">"root"</span>,</div><div class="line">        password = <span class="string">"I am the password of mysql"</span>,</div><div class="line">        database = <span class="string">"doll"</span>, <span class="comment"># 数据库名</span></div><div class="line">        charset = <span class="string">'utf8'</span></div><div class="line">        <span class="comment"># 我们可以在此处来配置返回类型, 如下将按字典返回, 不定义则返回tuple</span></div><div class="line">        <span class="comment"># cursorclass = pymysql.cursors.DictCursor</span></div><div class="line">        <span class="comment"># 文档链接: http://mysql-python.sourceforge.net/MySQLdb-1.2.2/public/MySQLdb.cursors-module.html</span></div><div class="line">    )</div><div class="line"></div><div class="line">    cursor = connection.cursor()</div><div class="line">    result = cursor.execute(<span class="string">"select ipaddress from device;"</span>) <span class="comment"># 查表</span></div><div class="line"></div><div class="line">    result = cursor.fetchall()</div><div class="line">    cursor.close()</div><div class="line">    connection.close()</div><div class="line">    </div><div class="line">    <span class="comment"># 此时result结果应为(('192.168.0.1',), ('192.168.0.33',),)</span></div><div class="line">    new_array = []</div><div class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> map(<span class="keyword">lambda</span> x: x, result):</div><div class="line">        <span class="keyword">for</span> ip <span class="keyword">in</span> t:</div><div class="line">            new_array.append(ip)</div><div class="line">    <span class="comment"># 将ip数组转换为方法参数格式</span></div><div class="line">    ipset = set(new_array)</div><div class="line">    <span class="comment"># 内部设置ip列表</span></div><div class="line">    set_ips(*ipset)</div></pre></td></tr></table></figure>
<p>这样我们就可以直接这样来调用了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fab all_ip update</div></pre></td></tr></table></figure>
<p>最后附上Fabric文档链接 <a href="http://docs.fabfile.org/en/1.14/" target="_blank" rel="external">http://docs.fabfile.org/en/1.14/</a> 需要什么查文档就好了!!</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> fabric </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 使用教程]]></title>
      <url>/2018/01/11/Hexo-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>太久没写博客都忘了咋用了, 还得现去查, 还是自己来记录下一下吧, 毕竟再简单的东西也禁不住忘啊…</p>
<h2 id="进入目录…"><a href="#进入目录…" class="headerlink" title="进入目录…"></a>进入目录…</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/asura19.github.io</div></pre></td></tr></table></figure>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;一个标题&quot;</div></pre></td></tr></table></figure>
<h2 id="用Markdown写文章"><a href="#用Markdown写文章" class="headerlink" title="用Markdown写文章"></a>用Markdown写文章</h2><p>“blablabla…”</p>
<h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate  (可简写为 hexo g)</div></pre></td></tr></table></figure>
<h2 id="启动本地服务器查看"><a href="#启动本地服务器查看" class="headerlink" title="启动本地服务器查看"></a>启动本地服务器查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server  (可简写为 hexo s)</div></pre></td></tr></table></figure>
<h2 id="部署到网站"><a href="#部署到网站" class="headerlink" title="部署到网站"></a>部署到网站</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy  (可简写为 hexo d)</div></pre></td></tr></table></figure>
<h2 id="重新填写自定义域名"><a href="#重新填写自定义域名" class="headerlink" title="重新填写自定义域名"></a>重新填写自定义域名</h2><p>如果在github配置了自定义域名, 那么hexo deploy之后不知为何会将域名消掉, 所以要在项目Setting-Custom domain重新填写域名</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[新浪微博OnePassword SSO登录]]></title>
      <url>/2017/06/06/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AOnePassword-SSO%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>发现VVebo的SSO登录在Webview使用了1Password, 觉得可以用运行时来实现.<a href="http://oph74zx6j.bkt.clouddn.com/SSO.gif" target="_blank" rel="external">点击查看效果图</a></p>
<p>实现思路:</p>
<ol>
<li>以苹果刚公开的工具UIDebuggingInformationOverlay查看微博SDK中的controller和view</li>
<li>以运行时method swizzling 替换系统viewWillAppear方法, 拦截到微博的控制器后, 在相应位置添加1Password按钮</li>
<li>1Password回调后以Safari调试此Webview,查看h5的elementID, 将账户密码添加进去, 自动登录</li>
</ol>
<h3 id="关于微博SDK-登录接口就不详述了"><a href="#关于微博SDK-登录接口就不详述了" class="headerlink" title="关于微博SDK, 登录接口就不详述了"></a>关于微博SDK, 登录接口就不详述了</h3><p>就是要注意微博SDK是在iOS没有安装微博客户端的时候才会调用Webview登录</p>
<h3 id="UIDebuggingInformationOverlay的使用"><a href="#UIDebuggingInformationOverlay的使用" class="headerlink" title="UIDebuggingInformationOverlay的使用"></a>UIDebuggingInformationOverlay的使用</h3><p>UIDebuggingInformationOverlay是苹果刚公开的UI调试工具<br>使用如下:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> overlayClass = <span class="type">NSClassFromString</span>(<span class="string">"UIDebuggingInformationOverlay"</span>) <span class="keyword">as</span>? <span class="type">UIWindow</span>.<span class="type">Type</span></div><div class="line"><span class="number">_</span> = overlayClass?.perform(<span class="type">NSSelectorFromString</span>(<span class="string">"prepareDebuggingOverlay"</span>))</div><div class="line"><span class="keyword">let</span> overlay = overlayClass?.perform(<span class="type">NSSelectorFromString</span>(<span class="string">"overlay"</span>)).takeUnretainedValue() <span class="keyword">as</span>? <span class="type">UIWindow</span></div><div class="line"><span class="number">_</span> = overlay?.perform(<span class="type">NSSelectorFromString</span>(<span class="string">"toggleVisibility"</span>))</div></pre></td></tr></table></figure>
<p>然后就可以在手机上看到对应的controller和view了:</p>
<p style="text-align:center;"><img src="http://oph74zx6j.bkt.clouddn.com/uidebugvc.jpg" width="50%" height="50%"></p><br><p style="text-align:center;"><img src="http://oph74zx6j.bkt.clouddn.com/uidebugview.jpg" width="50%" height="50%"></p>

<p>是不是很神奇!<br>OK, 现在我们很方便的拿到了控制器和view的名字”WBSDKAuthorizeWebViewController” “WBSDKWebView”,  当然也有其他方式, 不多说.</p>
<h3 id="swift中的method-swizzling"><a href="#swift中的method-swizzling" class="headerlink" title="swift中的method swizzling"></a>swift中的method swizzling</h3><p>swift3中dispatch_once_t 被取消了, 因此用全局常量来实现只执行一次swizzling</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">let</span> controllerMethodSwizzling: (<span class="type">UIViewController</span>.<span class="type">Type</span>) -&gt; () = &#123; viewController <span class="keyword">in</span></div><div class="line">    </div><div class="line">    <span class="keyword">let</span> originalSelector = #selector(viewController.viewWillAppear(<span class="number">_</span>:))</div><div class="line">    <span class="keyword">let</span> swizzledSelector = #selector(viewController.proj_viewWillAppear(animated:))</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> originalMethod = class_getInstanceMethod(viewController, originalSelector)</div><div class="line">    <span class="keyword">let</span> swizzledMethod = class_getInstanceMethod(viewController, swizzledSelector)</div><div class="line">    </div><div class="line">    method_exchangeImplementations(originalMethod, swizzledMethod)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    open <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">initialize</span>() </span>&#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">self</span> === <span class="type">UIViewController</span>.<span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        controllerMethodSwizzling(<span class="keyword">self</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">proj_viewWillAppear</span><span class="params">(animated: Bool)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.proj_viewWillAppear(animated: animated)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是! 在initialize方法处报了个警告, xcode跟我讲这方法swift不一定调, 而且以后彻底不让在swift里用了.好吧, 那我在applicationDidFinishLaunchingWithOptions调总可以了吧.</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">   controllerMethodSwizzling(<span class="type">UIViewController</span>.<span class="keyword">self</span>)     </div><div class="line">   <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="调用OnePassword"><a href="#调用OnePassword" class="headerlink" title="调用OnePassword"></a>调用OnePassword</h3><p>现在我们拦截到了微博控制器的viewWillAppear方法了, 接下来就是一些基本操作了.<br>1Password的iOS代码地址<a href="https://github.com/agilebits/onepassword-app-extension" target="_blank" rel="external">https://github.com/agilebits/onepassword-app-extension</a></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">proj_viewWillAppear</span><span class="params">(animated: Bool)</span></span> &#123;</div><div class="line">   <span class="keyword">self</span>.proj_viewWillAppear(animated: animated)</div><div class="line">        </div><div class="line">   <span class="keyword">let</span> viewControllerName = <span class="type">NSStringFromClass</span>(type(of: <span class="keyword">self</span>))</div><div class="line">        </div><div class="line">   <span class="keyword">if</span> viewControllerName == <span class="string">"WBSDKAuthorizeWebViewController"</span> &#123;</div><div class="line">            </div><div class="line">	  <span class="keyword">let</span> hasOnePassword = <span class="type">UIApplication</span>.shared.canOpenURL(<span class="type">URL</span>(string: <span class="string">"org-appextension-feature-password-management://"</span>)!)</div><div class="line">       </div><div class="line">	  <span class="keyword">guard</span> hasOnePassword <span class="keyword">else</span> &#123;</div><div class="line">	      <span class="keyword">return</span></div><div class="line">	  &#125;</div><div class="line">            </div><div class="line">     <span class="keyword">self</span>.navigationItem.rightBarButtonItem = <span class="type">UIBarButtonItem</span>(image: <span class="type">UIImage</span>(named: <span class="string">"onepassword"</span>),</div><div class="line">                                                              landscapeImagePhone: <span class="literal">nil</span>,</div><div class="line">                                                              style: .done,</div><div class="line">                                                              target: <span class="keyword">self</span>,</div><div class="line">                                                              action: #selector(onePassword(<span class="number">_</span>:)))</div><div class="line">&#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">onePassword</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">        <span class="keyword">for</span> view <span class="keyword">in</span> <span class="keyword">self</span>.view.subviews &#123;</div><div class="line">            <span class="keyword">if</span> <span class="type">NSStringFromClass</span>(type(of: view)) == <span class="string">"WBSDKWebView"</span> &#123;</div><div class="line">            </div><div class="line">                <span class="keyword">for</span> subview <span class="keyword">in</span> view.subviews &#123;    </div><div class="line">                    <span class="keyword">let</span> viewClassName = <span class="type">NSStringFromClass</span>(type(of: subview))</div><div class="line">                    <span class="keyword">if</span> viewClassName == <span class="string">"UIWebView"</span> &#123;</div><div class="line">                    </div><div class="line">                        <span class="keyword">let</span> webview = subview <span class="keyword">as</span>! <span class="type">UIWebView</span></div><div class="line">                        <span class="type">OnePasswordExtension</span>.shared().findLogin(forURLString: <span class="string">"weibo.com"</span>, <span class="keyword">for</span>: <span class="keyword">self</span></div><div class="line">                            , sender: sender, completion: &#123; (success, error) <span class="keyword">in</span></div><div class="line">                                <span class="keyword">if</span> (success != <span class="literal">nil</span>) &#123;</div><div class="line">                                    <span class="keyword">let</span> info = success <span class="keyword">as</span>! <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt;</div><div class="line">                                    <span class="keyword">let</span> username: <span class="type">String</span> = info[<span class="string">"username"</span>] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">                                    <span class="keyword">let</span> password: <span class="type">String</span> = info[<span class="string">"password"</span>] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">                                    webview.stringByEvaluatingJavaScript(from: <span class="string">"document.getElementById('loginName').value = '<span class="subst">\(username)</span>'"</span>)</div><div class="line">                                    webview.stringByEvaluatingJavaScript(from: <span class="string">"document.getElementById('loginPassword').value = '<span class="subst">\(password)</span>'"</span>)</div><div class="line">                                    webview.stringByEvaluatingJavaScript(from: <span class="string">"document.getElementById('loginAction').click()"</span>)</div><div class="line">                                    </div><div class="line">                                &#125;</div><div class="line">                        &#125;)</div><div class="line">                        <span class="keyword">break</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在获取了账户和密码之后, 用Safari调试Webview可获得elementID, 然后以Webview执行js代码即可</p>
<p style="text-align:center;"><img src="http://oph74zx6j.bkt.clouddn.com/webviewsafari.png"></p>

<p>这种场景不太常见, 实现技术都不难, 主要提供一个思路.</p>
<p>__原创文章, 转载请注明出处</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> SSO </tag>
            
            <tag> Runtime </tag>
            
            <tag> Webview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GCD死锁]]></title>
      <url>/2017/02/18/GCD%E6%AD%BB%E9%94%81/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>一直想写一篇关于GCD死锁问题的文章, 但是后来发现了一篇文章讲得很好, 还是直接转载吧(但是把OC改为Swift 3了). 原文作者: <a href="http://www.brighttj.com/ios/ios-gcd-deadlock.html" target="_blank" rel="external">brighttj(@saitjr)</a></p>
<p>死锁一直都是在使用多线程时，需要注意的一个问题。以前对同步、异步，串行、并行只有一个模糊的概念，想想也是时候整理一下了。再看看之前的博客，已经很久没有干货了【说得好像之前有干货一样】，所以，这篇博客，我尽最大努力，也借鉴了很多其他博客中的例子，来讲解GCD死锁问题。</p>
<h2 id="串行与并行"><a href="#串行与并行" class="headerlink" title="串行与并行"></a>串行与并行</h2><p>在使用GCD的时候，我们会把需要处理的任务放到Block中，然后将任务追加到相应的队列里面，这个队列，叫做Dispatch Queue。然而，存在于两种Dispatch Queue，一种是要等待上一个执行完，再执行下一个的Serial Dispatch Queue，这叫做串行队列；另一种，则是不需要上一个执行完，就能执行下一个的Concurrent Dispatch Queue，叫做并行队列。这两种，均遵循FIFO原则。</p>
<p><strong>举一个简单的例子，在三个任务中输出1、2、3，串行队列输出是有序的1、2、3，但是并行队列的先后顺序就不一定了。</strong></p>
<p>那么，并行队列又是怎么在执行呢？</p>
<p>虽然可以同时多个任务的处理，但是并行队列的处理量，还是要根据当前系统状态来。如果当前系统状态最多处理2个任务，那么1、2会排在前面，3什么时候操作，就看1或者2谁先完成，然后3接在后面。</p>
<p>串行和并行就简单说到这里，关于它们的技术点其实还有很多，可以自行了解。</p>
<h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>串行与并行针对的是队列，而同步与异步，针对的则是线程。最大的区别在于，同步线程要阻塞当前线程，必须要等待同步线程中的任务执行完，返回以后，才能继续执行下一任务；而异步线程则是不用等待。</p>
<p>仅凭这几句话还是很难理解，所以之后准备了很多案例，可以边分析边理解。</p>
<h2 id="GCD-API"><a href="#GCD-API" class="headerlink" title="GCD API"></a>GCD API</h2><p>GCD API很多，这里仅介绍本文用到的。</p>
<h4 id="1-系统标准提供的两个队列"><a href="#1-系统标准提供的两个队列" class="headerlink" title="1.系统标准提供的两个队列"></a>1.系统标准提供的两个队列</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 全局队列，也是一个并行队列</span></div><div class="line"></div><div class="line"><span class="type">DispatchQueue</span>.global() </div><div class="line"></div><div class="line"><span class="comment">// 主队列，在主线程中运行，因为主线程只有一个，所以这是一个串行队列</span></div><div class="line"></div><div class="line"><span class="type">DispatchQueue</span>.main</div></pre></td></tr></table></figure>
<h4 id="2-除此之外，还可以自己生成队列"><a href="#2-除此之外，还可以自己生成队列" class="headerlink" title="2.除此之外，还可以自己生成队列"></a>2.除此之外，还可以自己生成队列</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 默认是串行队列</span></div><div class="line"><span class="type">DispatchQueue</span>(label: <span class="string">"com.demo.serialQueue"</span>) </div><div class="line"></div><div class="line"> <span class="comment">// 这是一个并行队列</span></div><div class="line"><span class="type">DispatchQueue</span>(label: <span class="string">"com.demo.concurrentQueue"</span>, attributes: .concurrent</div></pre></td></tr></table></figure>
<h4 id="3-接下来是同步与异步线程的创建："><a href="#3-接下来是同步与异步线程的创建：" class="headerlink" title="3.接下来是同步与异步线程的创建："></a>3.接下来是同步与异步线程的创建：</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">queue.sync &#123;...&#125; <span class="comment">// 同步线程</span></div><div class="line"></div><div class="line">queue.async &#123;...&#125; <span class="comment">// 异步线程</span></div></pre></td></tr></table></figure>
<h2 id="案例与分析"><a href="#案例与分析" class="headerlink" title="案例与分析"></a>案例与分析</h2><p>假设你已经基本了解了上面提到的知识，接下来进入案例讲解阶段。</p>
<h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一:"></a>案例一:</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="number">1</span>)  <span class="comment">// 任务1</span></div><div class="line"></div><div class="line"><span class="type">DispatchQueue</span>.main.sync &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="number">2</span>)  <span class="comment">// 任务2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="number">3</span>)  <span class="comment">// 任务3</span></div></pre></td></tr></table></figure>
<p>结果，控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1</div></pre></td></tr></table></figure>
<p>分析</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.sync表示是一个同步线程；</div><div class="line"></div><div class="line"><span class="type">DispatchQueue</span>.main 表示运行在主线程中的主队列；</div><div class="line"></div><div class="line">任务<span class="number">2</span>是同步线程的任务。</div></pre></td></tr></table></figure>
<p>首先执行任务1，这是肯定没问题的，只是接下来，程序遇到了同步线程，那么它会进入等待，等待任务2执行完，然后执行任务3。但这是队列，有任务来，当然会将任务加到队尾，然后遵循FIFO原则执行任务。那么，现在任务2就会被加到最后，任务3排在了任务2前面，问题来了：</p>
<p><strong>任务3要等任务2执行完才能执行，任务2由排在任务3后面，意味着任务2要在任务3执行完才能执行，所以他们进入了互相等待的局面。【既然这样，那干脆就卡在这里吧】这就是死锁。</strong></p>
<p><img src="http://oph74zx6j.bkt.clouddn.com/gcd-deadlock-1.jpg" alt="deadlock1"></p>
<h4 id="案例二："><a href="#案例二：" class="headerlink" title="案例二："></a>案例二：</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="number">1</span>)  <span class="comment">// 任务1</span></div><div class="line"></div><div class="line"><span class="type">DispatchQueue</span>.global(qos: .userInitiated).sync &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="number">2</span>)  <span class="comment">// 任务2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="number">3</span>)  <span class="comment">// 任务3</span></div></pre></td></tr></table></figure>
<p>结果，控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"></div><div class="line">2</div><div class="line"></div><div class="line">3</div></pre></td></tr></table></figure>
<p>分析：</p>
<p>首先执行任务1，接下来会遇到一个同步线程，程序会进入等待。等待任务2执行完成以后，才能继续执行任务3。从dispatch_get_global_queue可以看出，任务2被加入到了全局的并行队列中，当并行队列执行完任务2以后，返回到主队列，继续执行任务3。</p>
<p><img src="http://oph74zx6j.bkt.clouddn.com/gcd-deadlock-2.jpg" alt="deadlock2"></p>
<h4 id="案例三："><a href="#案例三：" class="headerlink" title="案例三："></a>案例三：</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"com.demo.serialQueue"</span>)</div><div class="line">        </div><div class="line"><span class="built_in">print</span>(<span class="number">1</span>)  <span class="comment">// 任务1</span></div><div class="line">   </div><div class="line">queue.async &#123;</div><div class="line">  </div><div class="line">  <span class="built_in">print</span>(<span class="number">2</span>)  <span class="comment">// 任务2</span></div><div class="line">  </div><div class="line">  queue.sync &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="number">3</span>)  <span class="comment">// 任务3</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="built_in">print</span>(<span class="number">4</span>)  <span class="comment">// 任务4</span></div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="built_in">print</span>(<span class="number">5</span>)  <span class="comment">// 任务5</span></div></pre></td></tr></table></figure>
<p>结果，控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"></div><div class="line">5</div><div class="line"></div><div class="line">2</div><div class="line"></div><div class="line">// 5和2的顺序不一定</div></pre></td></tr></table></figure>
<p>分析：</p>
<p>这个案例没有使用系统提供的串行或并行队列，而是自己通过DispatchQueue(label: “”)函数创建了一个的串行队列。</p>
<p><strong><br>执行任务1；
</strong><br><strong><br>遇到异步线程，将【任务2、同步线程、任务4】加入串行队列中。因为是异步线程，所以在主线程中的任务5不必等待异步线程中的所有任务完成；
</strong><br><strong><br>因为任务5不必等待，所以2和5的输出顺序不能确定；
</strong><br><strong><br>任务2执行完以后，遇到同步线程，这时，将任务3加入串行队列；
</strong><br><strong><br>又因为任务4比任务3早加入串行队列，所以，任务3要等待任务4完成以后，才能执行。但是任务3所在的同步线程会阻塞，所以任务4必须等任务3执行完以后再执行。这就又陷入了无限的等待中，造成死锁。
</strong></p>
<p><img src="http://oph74zx6j.bkt.clouddn.com/gcd-deadlock-3.jpg" alt="deadlock3"></p>
<h4 id="案例四"><a href="#案例四" class="headerlink" title="案例四:"></a>案例四:</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="number">1</span>)  <span class="comment">// 任务1</span></div><div class="line">        </div><div class="line"><span class="type">DispatchQueue</span>.global(qos: .userInitiated).async &#123;</div><div class="line">  </div><div class="line">  <span class="built_in">print</span>(<span class="number">2</span>)  <span class="comment">// 任务2</span></div><div class="line">  </div><div class="line">  <span class="type">DispatchQueue</span>.main.sync &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="number">3</span>)  <span class="comment">// 任务3</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="built_in">print</span>(<span class="number">4</span>)  <span class="comment">// 任务4</span></div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="built_in">print</span>(<span class="number">5</span>)  <span class="comment">// 任务5</span></div></pre></td></tr></table></figure>
<p>结果，控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"></div><div class="line">2</div><div class="line"></div><div class="line">5</div><div class="line"></div><div class="line">3</div><div class="line"></div><div class="line">4</div><div class="line"></div><div class="line">// 5和2的顺序不一定</div></pre></td></tr></table></figure>
<p>分析：</p>
<p>首先，将【任务1、异步线程、任务5】加入Main Queue中，异步线程中的任务是：【任务2、同步线程、任务4】。</p>
<p>所以，先执行任务1，然后将异步线程中的任务加入到Global Queue中，因为异步线程，所以任务5不用等待，结果就是2和5的输出顺序不一定。</p>
<p>然后再看异步线程中的任务执行顺序。任务2执行完以后，遇到同步线程。将同步线程中的任务加入到Main Queue中，这时加入的任务3在任务5的后面。</p>
<p>当任务3执行完以后，没有了阻塞，程序继续执行任务4。</p>
<p>从以上的分析来看，得到的几个结果：1最先执行；2和5顺序不一定；4一定在3后面</p>
<p><img src="http://oph74zx6j.bkt.clouddn.com/gcd-deadlock-4.jpg" alt="deadlock4"></p>
<h4 id="案例五："><a href="#案例五：" class="headerlink" title="案例五："></a>案例五：</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="type">DispatchQueue</span>.global(qos: .userInitiated).async &#123;</div><div class="line">            </div><div class="line">  <span class="built_in">print</span>(<span class="number">1</span>)  <span class="comment">// 任务1</span></div><div class="line">  </div><div class="line">  <span class="type">DispatchQueue</span>.main.sync &#123;</div><div class="line">      <span class="built_in">print</span>(<span class="number">2</span>)  <span class="comment">// 任务2</span></div><div class="line">      </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="built_in">print</span>(<span class="number">3</span>)  <span class="comment">// 任务3</span></div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="built_in">print</span>(<span class="number">4</span>)  <span class="comment">// 任务4</span></div><div class="line">   </div><div class="line"><span class="keyword">while</span> <span class="literal">true</span> &#123;</div><div class="line">  </div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="built_in">print</span>(<span class="number">5</span>)  <span class="comment">// 任务5</span></div></pre></td></tr></table></figure>
<p>结果，控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line"></div><div class="line">4</div><div class="line"></div><div class="line">// 1和4的顺序不一定</div></pre></td></tr></table></figure>
<p>分析：</p>
<p>和上面几个案例的分析类似，先来看看都有哪些任务加入了Main Queue：【异步线程、任务4、死循环、任务5】。</p>
<p>在加入到Global Queue异步线程中的任务有：【任务1、同步线程、任务3】。</p>
<p>第一个就是异步线程，任务4不用等待，所以结果任务1和任务4顺序不一定。</p>
<p>任务4完成后，程序进入死循环，Main Queue阻塞。但是加入到Global Queue的异步线程不受影响，继续执行任务1后面的同步线程。</p>
<p>同步线程中，将任务2加入到了主线程，并且，任务3等待任务2完成以后才能执行。这时的主线程，已经被死循环阻塞了。所以任务2无法执行，当然任务3也无法执行，在死循环后的任务5也不会执行。</p>
<p>最终，只能得到1和4顺序不定的结果。</p>
<p><img src="http://oph74zx6j.bkt.clouddn.com/gcd-deadlock-5.jpg" alt="deadlock5"></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> GCD </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 3D touch]]></title>
      <url>/2017/01/22/iOS-3D-touch/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>简单介绍一下iOS中的3Dtouch. 一般开发中主要有三种情境使用:<br>icon的3Dtouch<br>应用内的预览<br>再就是可能游戏中会用到的按压力度的检测了</p>
<h2 id="icon的3D-touch"><a href="#icon的3D-touch" class="headerlink" title="icon的3D touch"></a>icon的3D touch</h2><h3 id="第一种方式-在info-plist中添加"><a href="#第一种方式-在info-plist中添加" class="headerlink" title="第一种方式: 在info.plist中添加"></a>第一种方式: 在info.plist中添加</h3><p><img src="http://oph74zx6j.bkt.clouddn.com/3Dtouch_infoplist.png" alt="3Dtouch with info.plist"></p>
<p>效果如下</p>
<p style="text-align:center;"><img src="http://oph74zx6j.bkt.clouddn.com/3Dtoucheffect.jpg" width="50%" height="50%"></p>

<p>解释一下其中的一些key的意思:<br><code>UIApplicationShortcutItemIconType</code> 是使用系统提供的图标, 目前提供了近30种图标<br><code>UIApplicationShortcutItemIconFile</code> 是 .xcassets 文件中自定义的图标<br><code>UIApplicationShortcutItemType</code> 是应用通过3Dtouch启动时传给应用内部的表示, 让内部代码知道点击的是哪个item.<br>其他的key显而易见, 不做解释.</p>
<p>那么接下来就是在代码中处理3Dtouch事件了:<br>1.首先应用第一次启动:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> launchedShortcutItem: <span class="type">UIApplicationShortcutItem</span>?</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> shortcutItem = launchOptions?[<span class="type">UIApplicationLaunchOptionsKey</span>.shortcutItem] &#123;</div><div class="line">            launchedShortcutItem = shortcutItem <span class="keyword">as</span>? <span class="type">UIApplicationShortcutItem</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.应用已经启动, 并从后台3Dtouch启动:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, </span></span></div><div class="line">                   performActionFor shortcutItem: UIApplicationShortcutItem, </div><div class="line">                   completionHandler: @escaping <span class="params">(Bool)</span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">                   </div><div class="line">    <span class="keyword">let</span> handleAction = handleShortcutItem(shortcutItem)</div><div class="line">    completionHandler(handleAction)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过以上两种方式都获取了shortcutItem的信息, 就可以进行相应的逻辑处理了.</p>
<h3 id="用代码动态添加shortcutItem"><a href="#用代码动态添加shortcutItem" class="headerlink" title="用代码动态添加shortcutItem"></a>用代码动态添加shortcutItem</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> item = <span class="type">UIApplicationShortcutItem</span>(type: <span class="string">"two"</span>,</div><div class="line">                                     localizedTitle: <span class="string">"Phoenix"</span>,</div><div class="line">                                     localizedSubtitle: <span class="string">"Make a Call"</span>,</div><div class="line">                                     icon: <span class="type">UIApplicationShortcutIcon</span>(type: .cloud),</div><div class="line">                                     userInfo: <span class="literal">nil</span>)</div><div class="line">        </div><div class="line"><span class="type">UIApplication</span>.shared.shortcutItems = [item]</div></pre></td></tr></table></figure>
<p>注意: 通过info.plist 和 代码添加的shortcutItem 并不冲突, 取并集, 但系统限制最多能够显示4个item, 因此会自动按顺序截取前4个.</p>
<h2 id="应用内预览"><a href="#应用内预览" class="headerlink" title="应用内预览"></a>应用内预览</h2><p>先看一下效果图</p>
<p style="text-align:center;"><img src="http://oph74zx6j.bkt.clouddn.com/3dtouchpeekpop.gif" width="50%" height="50%"></p>

<h3 id="peek-amp-pop"><a href="#peek-amp-pop" class="headerlink" title="peek &amp; pop"></a>peek &amp; pop</h3><p>peek是由一个能响应事件的view触发的, 需要在viewDidLoad中注册代理和来源视图:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    <span class="keyword">self</span>.registerForPreviewing(with: <span class="keyword">self</span> <span class="keyword">as</span> <span class="type">UIViewControllerPreviewingDelegate</span>, sourceView: <span class="keyword">self</span>.view)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后是遵守协议和实现协议方法:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(<span class="number">_</span> previewingContext: UIViewControllerPreviewing, viewControllerForLocation location: CGPoint)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">    <span class="comment">// 返回目标控制器</span></div><div class="line">    <span class="keyword">let</span> indexPath = <span class="keyword">self</span>.tableView.indexPathForRow(at: location)</div><div class="line">    <span class="keyword">let</span> storyboard = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="literal">nil</span>)</div><div class="line">    <span class="keyword">let</span> content = storyboard.instantiateViewController(withIdentifier: <span class="string">"ContentViewController"</span>) <span class="keyword">as</span>! <span class="type">ContentViewController</span></div><div class="line">    <span class="keyword">guard</span> indexPath != <span class="literal">nil</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> content</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(<span class="number">_</span> previewingContext: UIViewControllerPreviewing, commit viewControllerToCommit: UIViewController)</span></span> &#123;</div><div class="line">    <span class="keyword">self</span>.showDetailViewController(viewControllerToCommit, sender: <span class="keyword">self</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="peek-quick-actions"><a href="#peek-quick-actions" class="headerlink" title="peek quick actions"></a>peek quick actions</h3><p>在目标控制器实现以下方法:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">var</span> previewActionItems: [<span class="type">UIPreviewActionItem</span>] &#123;</div><div class="line">    <span class="keyword">let</span> action = <span class="type">UIPreviewAction</span>(title: <span class="string">"Save"</span>, style: .<span class="keyword">default</span>) &#123; (action: <span class="type">UIPreviewAction</span>, controller: <span class="type">UIViewController</span>) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"Save image"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [action]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="按压力度监听"><a href="#按压力度监听" class="headerlink" title="按压力度监听"></a>按压力度监听</h2><p>实现了一个小demo</p>
<p></p><p style="text-align:center;"><img src="http://oph74zx6j.bkt.clouddn.com/3dtouchweigh.gif" width="50%" height="50%"></p><br>代码如下:<p></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> touch = touches.first</div><div class="line">    <span class="keyword">self</span>.centerPoint = touch?.location(<span class="keyword">in</span>: touch?.view)</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesMoved</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> touch = touches.first</div><div class="line">    <span class="keyword">let</span> force = touch?.force</div><div class="line">    <span class="keyword">let</span> maximumPossibleForce = touch?.maximumPossibleForce</div><div class="line">    <span class="keyword">let</span> quotient = force! / maximumPossibleForce!</div><div class="line">    <span class="keyword">let</span> border = <span class="keyword">self</span>.view.frame.size.width</div><div class="line">    <span class="keyword">self</span>.round.layer.cornerRadius = border * <span class="number">0.5</span> * quotient</div><div class="line">    <span class="keyword">self</span>.round.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: border * quotient, height: border * quotient)</div><div class="line">    <span class="keyword">let</span> point = touch?.location(<span class="keyword">in</span>: touch?.view)</div><div class="line">    <span class="keyword">self</span>.round.center = point!</div><div class="line">        </div><div class="line">    <span class="keyword">let</span> weight = <span class="number">415</span> * quotient</div><div class="line">    <span class="keyword">self</span>.weightLabel.text = <span class="string">"<span class="subst">\(weight)</span> g"</span></div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesEnded</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</div><div class="line">    <span class="keyword">self</span>.round.frame = <span class="type">CGRect</span>.zero</div><div class="line">    <span class="keyword">self</span>.weightLabel.text = <span class="string">"0 g"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/Asura19/My30DaysOfSwift/tree/master/3DTouch" target="_blank" rel="external">本文完整demo</a> (3Dtouch不支持模拟器, 请以真机调试)</p>
<p>__原创文章, 转载请注明出处</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
            <tag> 3Dtouch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/01/14/hello-world/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p>Hello, This is my first post!</p>
<video src="http://oph74zx6j.bkt.clouddn.com/Matchbox%20Twenty%20-%20How%20Far%20We%27ve%20Come.mp4" type="video/mp4" preload="none" poster="http://oph74zx6j.bkt.clouddn.com/how%20far%20we%27ve%20com%20screenshot.png" controls="controls" width="100%" height="100%"><br></video>

]]></content>
      
        
    </entry>
    
  
  
</search>
